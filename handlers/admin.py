from pathlib import Path
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import load_config, save_config
from keyboards.inline import (
    admin_menu_kb,
    edit_content_kb,
    edit_photos_kb,
    back_to_admin_kb
)

router = Router()
config_path = Path("assets/config.yaml")


class EditTextStates(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()


class EditPhotoStates(StatesGroup):
    waiting_for_section = State()
    waiting_for_photo = State()


class EditLinkStates(StatesGroup):
    waiting_for_section = State()
    waiting_for_link = State()


class EditContactsStates(StatesGroup):
    waiting_for_contacts = State()


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    config = load_config()
    if message.from_user.id not in config.bot.admin_ids:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu_kb()
    )


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
@router.callback_query(F.data == "edit_content")
async def edit_content(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=edit_content_kb()
    )
    await state.set_state(EditTextStates.waiting_for_section)
    await callback.answer()


@router.callback_query(EditTextStates.waiting_for_section)
async def select_section_for_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞"""
    section = callback.data.replace("edit_text_", "")
    await state.update_data(section=section)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}':",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditTextStates.waiting_for_text)
    await callback.answer()


@router.message(EditTextStates.waiting_for_text)
async def save_new_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    section = data["section"]
    new_text = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = load_config()
    if hasattr(config.content, section):
        getattr(config.content, section)["caption"] = new_text
    else:
        config.content[section]["text"] = new_text

    save_config(config)

    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ ---
@router.callback_query(F.data == "edit_photos")
async def edit_photos(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ—Ç–æ"""
    await callback.message.edit_text(
        "üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
        reply_markup=edit_photos_kb()
    )
    await state.set_state(EditPhotoStates.waiting_for_section)
    await callback.answer()


@router.callback_query(EditPhotoStates.waiting_for_section)
async def select_section_for_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ñ–æ—Ç–æ"""
    section = callback.data.replace("edit_photo_", "")
    await state.update_data(section=section)
    await callback.message.edit_text(
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}':",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditPhotoStates.waiting_for_photo)
    await callback.answer()


@router.message(EditPhotoStates.waiting_for_photo, F.photo)
async def save_new_photo(message: Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    section = data["section"]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = f"assets/images/{section}.jpg"

    await bot.download_file(file.file_path, file_path)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = load_config()
    getattr(config.content, section)["photo"] = file_path
    save_config(config)

    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ---
@router.callback_query(F.data == "edit_links")
async def edit_links(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üîó –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:",
        reply_markup=edit_content_kb(links=True)
    )
    await state.set_state(EditLinkStates.waiting_for_section)
    await callback.answer()


@router.callback_query(EditLinkStates.waiting_for_section)
async def select_section_for_link(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏"""
    section = callback.data.replace("edit_link_", "")
    await state.update_data(section=section)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}':",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditLinkStates.waiting_for_link)
    await callback.answer()


@router.message(EditLinkStates.waiting_for_link)
async def save_new_link(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    section = data["section"]
    new_link = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = load_config()
    getattr(config.content, section)["map_url"] = new_link
    save_config(config)

    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---
@router.callback_query(F.data == "edit_contacts")
async def edit_contacts(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await callback.message.edit_text(
        "üìá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_contacts)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_contacts)
async def save_new_contacts(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    new_contacts = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = load_config()
    config.content.contacts["text"] = new_contacts
    save_config(config)

    await message.answer(
        "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


@router.callback_query(F.data == "admin_back")
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    await callback.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu_kb()
    )
    await state.clear()
    await callback.answer()
