from pathlib import Path
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import load_config, update_config_field, save_config
from keyboards.inline import (
    admin_menu_kb,
    edit_content_kb,
    edit_photos_kb,
    back_to_admin_kb, edit_contacts_kb
)

router = Router()
config_path = Path("assets/config.yaml")


class EditTextStates(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()


class EditPhotoStates(StatesGroup):
    waiting_for_section = State()
    waiting_for_photo = State()


class EditLinkStates(StatesGroup):
    waiting_for_section = State()
    waiting_for_link = State()


class EditContactsStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_site = State()
    waiting_for_vk = State()
    waiting_for_tg = State()
    waiting_for_caption = State()


class AdminStates(StatesGroup):
    waiting_for_id = State()


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    config = load_config()
    if message.from_user.id not in config.bot.admin_ids:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    await message.answer(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu_kb()
    )


@router.callback_query(F.data == "admin_back")
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    await callback.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu_kb()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "admin_add")
async def add_admin(callback: CallbackQuery, state: FSMContext):
    config = load_config()
    await callback.message.edit_text(
        f"""
        üë§ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {config.bot.admin_ids}
        –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:
        """,
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(AdminStates.waiting_for_id)
    await callback.answer()


@router.message(AdminStates.waiting_for_id)
async def add_admin_id(message: Message, state: FSMContext):
    user_id = int(message.text)
    config = load_config()
    config.bot.admin_ids.append(user_id)
    save_config(config)
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
@router.callback_query(F.data == "edit_content")
async def edit_content(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=edit_content_kb()
    )
    await state.set_state(EditTextStates.waiting_for_section)
    await callback.answer()


@router.callback_query(EditTextStates.waiting_for_section)
async def select_section_for_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞"""
    section = callback.data.replace("edit_text_", "")
    await state.update_data(section=section)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}':",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditTextStates.waiting_for_text)
    await callback.answer()


@router.message(EditTextStates.waiting_for_text)
async def save_new_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    section = data["section"]
    new_text = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    update_config_field(f"content.{section}.caption", new_text)

    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ ---
@router.callback_query(F.data == "edit_photos")
async def edit_photos(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ—Ç–æ"""
    await callback.message.edit_text(
        "üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:",
        reply_markup=edit_photos_kb()
    )
    await state.set_state(EditPhotoStates.waiting_for_section)
    await callback.answer()


@router.callback_query(EditPhotoStates.waiting_for_section)
async def select_section_for_photo(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ñ–æ—Ç–æ"""
    section = callback.data.replace("edit_photo_", "")
    await state.update_data(section=section)
    await callback.message.edit_text(
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}':",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditPhotoStates.waiting_for_photo)
    await callback.answer()


@router.message(EditPhotoStates.waiting_for_photo, F.photo)
async def save_new_photo(message: Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    section = data["section"]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = f"assets/images/{section}.jpg"

    await bot.download_file(file.file_path, file_path)

    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ---
@router.callback_query(F.data == "edit_links")
async def edit_links(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üîó –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:",
        reply_markup=edit_content_kb(links=True)
    )
    await state.set_state(EditLinkStates.waiting_for_section)
    await callback.answer()


@router.callback_query(EditLinkStates.waiting_for_section)
async def select_section_for_link(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏"""
    section = callback.data.replace("edit_link_", "")
    await state.update_data(section=section)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}':",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditLinkStates.waiting_for_link)
    await callback.answer()


@router.message(EditLinkStates.waiting_for_link)
async def save_new_link(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    section = data["section"]
    new_link = message.text

    update_config_field(f"content.{section}.url", new_link)

    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---
@router.callback_query(F.data == "edit_contacts")
async def edit_contacts_menu(callback: CallbackQuery, state: FSMContext):

    await callback.message.edit_text(
        "üìá –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_contacts_kb()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
@router.callback_query(F.data == "edit_contacts_photo")
async def edit_contacts_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_photo)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_photo, F.photo)
async def save_contacts_photo(message: Message, state: FSMContext, bot: Bot):
    config = load_config()
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = config.content.contacts.photo

    await bot.download_file(file.file_path, file_path)

    await message.answer("‚úÖ –§–æ—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_menu_kb())
    await state.clear()


@router.callback_query(F.data == "edit_contacts_site")
async def edit_contacts_site(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_site)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_site)
async def save_contacts_site(message: Message, state: FSMContext):

    update_config_field(f"content.contacts.site", message.text)

    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_kb())
    await state.clear()


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è vk, tg –∏ caption
@router.callback_query(F.data == "edit_contacts_vk")
async def edit_contacts_vk(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É VK:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_vk)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_vk)
async def save_contacts_vk(message: Message, state: FSMContext):

    update_config_field(f"content.contacts.vk", message.text)

    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ VK –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_kb())
    await state.clear()


@router.callback_query(F.data == "edit_contacts_tg")
async def edit_contacts_tg(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É Telegram:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_tg)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_tg)
async def save_contacts_tg(message: Message, state: FSMContext):

    update_config_field(f"content.contacts.tg", message.text)

    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_kb())
    await state.clear()


@router.callback_query(F.data == "edit_contacts_caption")
async def edit_contacts_caption(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_caption)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_caption)
async def save_contacts_caption(message: Message, state: FSMContext):

    update_config_field(f"content.contacts.caption", message.text)

    await message.answer("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_menu_kb())
    await state.clear()

'''
@router.callback_query(F.data == "edit_contacts")
async def edit_contacts(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await callback.message.edit_text(
        "üìá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=back_to_admin_kb()
    )
    await state.set_state(EditContactsStates.waiting_for_contacts)
    await callback.answer()


@router.message(EditContactsStates.waiting_for_contacts)
async def save_new_contacts(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    new_contacts = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    new_contacts_item = ContactsItem(text=new_contacts)
    update_config("content.contacts", new_contacts_item)

    await message.answer(
        "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=admin_menu_kb()
    )
    await state.clear()
'''
